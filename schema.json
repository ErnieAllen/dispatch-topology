{
  "prefix": "org.apache.qpid.dispatch", 
  "entityTypes": {
    "entity": {
      "attributes": {
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.entity", 
      "description": "Base entity type for all entities."
    }, 
    "sslProfile": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "certFile": {
          "type": "path", 
          "description": "The absolute path to the file containing the PEM-formatted public certificate to be used on the local end of any connections using this profile."
        }, 
        "displayNameFile": {
          "type": "string", 
          "description": "The absolute path to the file containing the unique id to display name mapping"
        }, 
        "uidFormat": {
          "type": "string", 
          "description": "A list of x509 client certificate fields that will be used to build a string that will uniquely identify the client certificate owner. For e.g. a value of 'cou' indicates that the uid will consist of c - common name concatenated with o - organization-company name concatenated with u - organization unit; or a value of 'o2' indicates that the uid will consist of o (organization name) concatenated with 2 (the sha256 fingerprint of the entire certificate) . Allowed values can be any combination of 'c'( ISO3166 two character country code), 's'(state or province), 'l'(Locality; generally - city), 'o'(Organization - Company Name), 'u'(Organization Unit - typically certificate type or brand), 'n'(CommonName - typically a user name for client certificates) and '1'(sha1 certificate fingerprint, as displayed in the fingerprints section when looking at a certificate with say a web browser is the hash of the entire certificate) and 2 (sha256 certificate fingerprint) and 5 (sha512 certificate fingerprint). The user identifier (uid) that is generated based on the uidFormat is a string which has a semi-colon as a separator between the components"
        }, 
        "certDb": {
          "type": "path", 
          "description": "The absolute path to the database that contains the public certificates of trusted certificate authorities (CA)."
        }, 
        "passwordFile": {
          "type": "path", 
          "description": "If the above private key is password protected, this is the absolute path to a file containing the password that unlocks the certificate key."
        }, 
        "password": {
          "type": "string", 
          "description": "An alternative to storing the password in a file referenced by passwordFile is to supply the password right here in the configuration file.  This takes precedence over the passwordFile if both are specified."
        }, 
        "keyFile": {
          "type": "path", 
          "description": "The absolute path to the file containing the PEM-formatted private key for the above certificate."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.sslProfile", 
      "description": "Attributes for setting TLS/SSL configuration for connections."
    }, 
    "linkRoute": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "containerId": {
          "type": "string", 
          "description": "ContainerID for the target container. Only one of containerId or connection should be specified for a linkRoute. Specifying both will result in the linkRoute not being created."
        }, 
        "prefix": {
          "required": true, 
          "type": "string", 
          "description": "The address prefix for the configured settings"
        }, 
        "connection": {
          "type": "string", 
          "description": "The name from a connector or listener. Only one of containerId or connection should be specified for a linkRoute. Specifying both will result in the linkRoute not being created."
        }, 
        "dir": {
          "required": true, 
          "type": [
            "in", 
            "out"
          ], 
          "description": "The permitted direction of links: 'in' means client senders; 'out' means client receivers"
        }, 
        "distribution": {
          "default": "linkBalanced", 
          "type": [
            "linkBalanced"
          ], 
          "description": "Treatment of traffic associated with the address"
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.linkRoute", 
      "description": "Entity type for link-route configuration.  This is used to identify remote containers that shall be destinations for routed link-attaches.  The link-routing configuration applies to an addressing space defined by a prefix."
    }, 
    "log": {
      "operations": [
        "UPDATE", 
        "READ"
      ], 
      "attributes": {
        "enable": {
          "type": "string", 
          "description": "Levels are: trace, debug, info, notice, warning, error, critical. The enable string is a comma-separated list of levels. A level may have a trailing '\\+' to enable that level and above. For example 'trace,debug,warning+' means enable trace, debug, warning, error and critical. The value 'none' means disable logging for the module."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "timestamp": {
          "type": "boolean", 
          "description": "Include timestamp in log messages."
        }, 
        "module": {
          "required": true, 
          "type": [
            "ROUTER", 
            "ROUTER_CORE", 
            "ROUTER_HELLO", 
            "ROUTER_LS", 
            "ROUTER_MA", 
            "MESSAGE", 
            "SERVER", 
            "AGENT", 
            "CONTAINER", 
            "ERROR", 
            "POLICY", 
            "HTTP", 
            "CONN_MGR", 
            "PYTHON", 
            "DEFAULT"
          ], 
          "description": "Module to configure. The special module 'DEFAULT' specifies defaults for all modules."
        }, 
        "source": {
          "type": "boolean", 
          "description": "Include source file and line number in log messages."
        }, 
        "output": {
          "type": "string", 
          "description": "Where to send log messages. Can be 'stderr', 'stdout', 'syslog' or a file name."
        },
        "identity": {
          "unique": true,
          "type": "string",
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.log", 
      "description": "Configure logging for a particular module. You can use the `UPDATE` operation to change log settings while the router is running."
    }, 
    "connector": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "maxSessionFrames": {
          "type": "integer", 
          "description": "Session incoming window measured in transfer frames for sessions created on this connection. This is the number of transfer frames that may simultaneously be in flight for all links in the session. Setting this value to zero selects the default session window size. Policy settings will not overwrite this value. The numerical product of maxFrameSize and maxSessionFrames may not exceed 2^31-1. If (maxFrameSize x maxSessionFrames) exceeds 2^31-1 then maxSessionFrames is reduced to (2^31-1 / maxFrameSize). maxSessionFrames has a minimum value of 1.  Defaults to 0 (unlimited window)."
        }, 
        "verifyHostName": {
          "default": true, 
          "type": "boolean", 
          "description": "yes: Ensures that when initiating a connection (as a client) the host name in the URL to which this connector connects to matches the host name in the digital certificate that the peer sends back as part of the SSL connection; no: Does not perform host name verification"
        }, 
        "stripAnnotations": {
          "default": "both", 
          "type": [
            "in", 
            "out", 
            "both", 
            "no"
          ], 
          "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations"
        },
        "saslUsername": {
          "type": "string", 
          "description": "The user name that the connector is using to connect to a peer."
        }, 
        "allowRedirect": {
          "default": true, 
          "type": "boolean", 
          "description": "Allow the peer to redirect this connection to another address."
        }, 
        "idleTimeoutSeconds": {
          "default": 16, 
          "type": "integer", 
          "description": "The idle timeout, in seconds, for connections through this connector.  If no frames are received on the connection for this time interval, the connection shall be closed."
        }, 
        "saslMechanisms": {
          "type": "string", 
          "description": "Space separated list of accepted SASL authentication mechanisms."
        }, 
        "maxFrameSize": {
          "default": 16384, 
          "type": "integer", 
          "description": "The maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. Policy settings will not overwrite this value. Defaults to 16384."
        }, 
        "port": {
          "default": "amqp", 
          "type": "string", 
          "description": "Port number or symbolic service name."
        }, 
        "linkCapacity": {
          "type": "integer", 
          "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
        }, 
        "host": {
          "default": "127.0.0.1", 
          "type": "string", 
          "description": "IP address: ipv4 or ipv6 literal or a host name"
        }, 
        "cost": {
          "default": 1,
          "type": "integer", 
          "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
        }, 
        "role": {
          "default": "normal", 
          "type": [
            "normal", 
            "inter-router", 
            "route-container"
          ], 
          "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection."
        }, 
        "saslPassword": {
          "type": "string", 
          "description": "The password that the connector is using to connect to a peer."
        }, 
        "sslProfile": {
          "type": "string", 
          "description": "Name of the sslProfile."
        }, 
        "logMessage": {
          "default": "none", 
          "type": "string", 
          "description": "A comma separated list that indicates which components of the message should be logged (no spaces allowed between list components). Defaults to 'none' (log nothing). If you want all properties and application properties of the message logged use 'all'. Specific components of the message can be logged by indicating the components via a comma separated list. The components are message-id, user-id, to, subject, reply-to, correlation-id, content-type, content-encoding, absolute-expiry-time, creation-time, group-id, group-sequence, reply-to-group-id, app-properties. The application-data part of the bare message will not be logged. This log message is written to the MESSAGE logging module. In the 'log' entity, set 'module' property to MESSAGE or DEFAULT and 'enable' to trace+ to see this log message"
        }, 
        "maxSessions": {
          "default": 32768, 
          "type": "integer", 
          "description": "The maximum number of sessions that can be simultaneously active on the connection. Setting this value to zero selects the default number of sessions. Policy settings will not overwrite this value. Defaults to 32768."
        }, 
        "protocolFamily": {
          "type": [
            "IPv4", 
            "IPv6"
          ], 
          "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.connector", 
      "description": "Establishes an outgoing connection from the router."
    }, 
    "autoLink": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "addr": {
          "required": true, 
          "type": "string", 
          "description": "The address of the provisioned object"
        }, 
        "linkRef": {
          "type": "string", 
          "description": "Reference to the org.apache.qpid.dispatch.router.link if the link exists"
        }, 
        "containerId": {
          "type": "string", 
          "description": "ContainerID for the target container. Only one of containerId or connection should be specified for an autoLink. Specifying both will result in the autoLink not being created"
        }, 
        "operStatus": {
          "type": [
            "inactive", 
            "attaching", 
            "failed", 
            "active", 
            "quiescing", 
            "idle"
          ], 
          "description": "The operational status of this autoLink: inactive - The remote container is not connected; attaching - the link is attaching to the remote node; failed - the link attach failed; active - the link is attached and operational; quiescing - the link is transitioning to idle state; idle - the link is attached but there are no deliveries flowing and no unsettled deliveries."
        }, 
        "connection": {
          "type": "string", 
          "description": "The name from a connector or listener. Only one of containerId or connection should be specified for an autoLink. Specifying both will result in the autoLink not being created"
        }, 
        "dir": {
          "required": true, 
          "type": [
            "in", 
            "out"
          ], 
          "description": "The direction of the link to be created.  In means into the router, out means out of the router."
        }, 
        "phase": {
          "type": "integer", 
          "description": "The address phase for this link.  Defaults to '0' for 'out' links and '1' for 'in' links."
        }, 
        "lastError": {
          "type": "string", 
          "description": "The error description from the last attach failure"
        }, 
        "externalAddr": {
          "type": "string", 
          "description": "If present, an alternate address of the node on the remote container.  This is used if the node has a different address than the address used internally by the router to route deliveries."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.autoLink", 
      "description": "Entity type for configuring auto-links.  Auto-links are links whose lifecycle is managed by the router.  These are typically used to attach to waypoints on remote containers (brokers, etc.)."
    }, 
    "policy": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "policyDir": {
          "type": "path", 
          "description": "Absolute path to a directory that holds vhost definition .json files. All vhost definitions in all .json files in this directory are processed."
        }, 
        "defaultVhost": {
          "default": "$default", 
          "type": "string", 
          "description": "Vhost rule set name to use for connections with a vhost that is otherwise not defined. Default vhost processing may be disabled either by erasing the definition of defaultVhost or by not defining a vhost object named '$default'."
        }, 
        "enableVhostPolicy": {
          "type": "boolean", 
          "description": "Enable vhost policy user groups, connection denial, and resource limit enforcement"
        }, 
        "maxConnections": {
          "default": 65535, 
          "type": "integer", 
          "description": "Global maximum number of concurrent client connections allowed. This limit is always enforced even if no other policy settings have been defined."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "singleton": true, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.policy", 
      "description": "Defines global connection limit"
    }, 
    "logStats": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "debugCount": {
          "type": "integer", 
          "description": "How many debug-level events have happened on this log."
        }, 
        "criticalCount": {
          "type": "integer", 
          "description": "How many critical-level events have happened on this log."
        }, 
        "traceCount": {
          "type": "integer", 
          "description": "How many trace-level events have happened on this log."
        }, 
        "warningCount": {
          "type": "integer", 
          "description": "How many warning-level events have happened on this log."
        }, 
        "infoCount": {
          "type": "integer", 
          "description": "How many info-level events have happened on this log."
        }, 
        "noticeCount": {
          "type": "integer", 
          "description": "How many notice-level events have happened on this log."
        }, 
        "errorCount": {
          "type": "integer", 
          "description": "How many error-level events have happened on this log."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.logStats", 
      "description": "histogram of the different severity-levels of events on the given log."
    }, 
    "vhostStats": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "perHostState": {
          "type": "map", 
          "description": "A map where the key is the host name and the value is a list of the host's connections."
        }, 
        "id": {
          "type": "string", 
          "description": "The vhost name."
        }, 
        "perUserState": {
          "type": "map", 
          "description": "A map where the key is the authenticated user name and the value is a list of the user's connections."
        }, 
        "sessionDenied": {
          "graph": true, 
          "type": "integer"
        }, 
        "connectionsApproved": {
          "graph": true, 
          "type": "integer"
        }, 
        "receiverDenied": {
          "graph": true, 
          "type": "integer"
        }, 
        "connectionsCurrent": {
          "graph": true, 
          "type": "integer"
        }, 
        "connectionsDenied": {
          "graph": true, 
          "type": "integer"
        }, 
        "senderDenied": {
          "graph": true, 
          "type": "integer"
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.vhostStats", 
      "description": "Virtual host connection and access statistics."
    }, 
    "listener": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "stripAnnotations": {
          "default": "both", 
          "type": [
            "in", 
            "out", 
            "both", 
            "no"
          ], 
          "description": "['in', 'out', 'both', 'no'] in: Strip the dispatch router specific annotations only on ingress; out: Strip the dispatch router specific annotations only on egress; both: Strip the dispatch router specific annotations on both ingress and egress; no - do not strip dispatch router specific annotations"
        }, 
        "requireSsl": {
          "type": "boolean", 
          "description": "yes: Require the use of SSL or TLS on the connection; no: Allow clients to connect without SSL or TLS."
        }, 
        "idleTimeoutSeconds": {
          "default": 16, 
          "type": "integer", 
          "description": "The idle timeout, in seconds, for connections through this listener.  If no frames are received on the connection for this time interval, the connection shall be closed."
        }, 
        "trustedCerts": {
          "type": "path", 
          "description": "This optional setting can be used to reduce the set of available CAs for client authentication.  If used, this setting must provide the absolute path to a PEM file that contains the trusted certificates."
        }, 
        "maxSessionFrames": {
          "type": "integer", 
          "description": "Session incoming window measured in transfer frames for sessions created on this connection. This is the number of transfer frames that may simultaneously be in flight for all links in the session. Setting this value to zero selects the default session window size. Policy settings, if specified, will overwrite this value. The numerical product of maxFrameSize and maxSessionFrames may not exceed 2^31-1. If (maxFrameSize x maxSessionFrames) exceeds 2^31-1 then maxSessionFrames is reduced to (2^31-1 / maxFrameSize). maxSessionFrames has a minimum value of 1. Defaults to 0 (unlimited window)."
        }, 
        "cost": {
          "default": 1, 
          "type": "integer", 
          "description": "For the 'inter-router' role only.  This value assigns a cost metric to the inter-router connection.  The default (and minimum) value is one.  Higher values represent higher costs.  The cost is used to influence the routing algorithm as it attempts to use the path with the lowest total cost from ingress to egress."
        }, 
        "port": {
          "default": "amqp", 
          "type": "string", 
          "description": "Port number or symbolic service name."
        }, 
        "saslPlugin": {
          "type": "string", 
          "description": "EXPERIMENTAL. Name of the a sasl plugin configuration section to use for this listener (e.g. authServicePlugin)."
        }, 
        "allowNoSasl": {
          "deprecated": true, 
          "type": "boolean", 
          "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
        }, 
        "addr": {
          "deprecated": true, 
          "type": "string", 
          "description": "(DEPRECATED)IP address: ipv4 or ipv6 literal or a host name. This attribute has been deprecated. Use host instead"
        }, 
        "saslMechanisms": {
          "type": "string", 
          "description": "Space separated list of accepted SASL authentication mechanisms."
        }, 
        "requireEncryption": {
          "type": "boolean", 
          "description": "yes: Require the connection to the peer to be encrypted; no: Permit non-encrypted communication with the peer"
        }, 
        "linkCapacity": {
          "type": "integer", 
          "description": "The capacity of links within this connection, in terms of message deliveries.  The capacity is the number of messages that can be in-flight concurrently for each link."
        }, 
        "requirePeerAuth": {
          "deprecated": true, 
          "type": "boolean", 
          "description": "(DEPRECATED) This attribute is now controlled by the authenticatePeer attribute."
        }, 
        "allowUnsecured": {
          "deprecated": true, 
          "type": "boolean", 
          "description": "(DEPRECATED) This attribute is now controlled by the requireEncryption attribute."
        }, 
        "maxSessions": {
          "default": 32768, 
          "type": "integer", 
          "description": "The maximum number of sessions that can be simultaneously active on the connection. Setting this value to zero selects the default number of sessions. Policy settings, if specified, will overwrite this value. Defaults to 32768."
        }, 
        "authenticatePeer": {
          "type": "boolean", 
          "description": "yes: Require the peer's identity to be authenticated; no: Do not require any authentication."
        }, 
        "http": {
          "type": "boolean", 
          "description": "Accept HTTP connections that can upgrade to AMQP over WebSocket. Plain AMQP connections are not accepted on this listener."
        }, 
        "multiTenant": {
          "type": "boolean", 
          "description": "If true, apply multi-tenancy to endpoints connected at this listener.  The address space is defined by the virtual host (hostname field in the Open)."
        }, 
        "host": {
          "type": "string", 
          "description": "A host name, IPV4 or IPV6 literal, or the empty string. The empty string listens on all local addresses. A host name listens on all addresses associated with the name. An IPV6 literal address (or wildcard '[::]') listens only for IPV6. An IPV4 literal address (or wildcard '0.0.0.0') listens only for IPV4."
        }, 
        "logMessage": {
          "default": "none", 
          "type": "string", 
          "description": "A comma separated list that indicates which components of the message should be logged. Defaults to 'none' (log nothing). If you want all properties and application properties of the message logged use 'all'. Specific components of the message can be logged by indicating the components via a comma separated list. The components are message-id, user-id, to, subject, reply-to, correlation-id, content-type, content-encoding, absolute-expiry-time, creation-time, group-id, group-sequence, reply-to-group-id, app-properties. The application-data part of the bare message will not be logged. No spaces are allowed"
        }, 
        "failoverList": {
          "type": "string", 
          "description": "A comma-separated list of failover urls to be supplied to connected clients.  Form: [(amqp|amqps|ws|wss)://]host_or_ip[:port]"
        }, 
        "role": {
          "default": "normal", 
          "type": [
            "normal", 
            "inter-router", 
            "route-container"
          ], 
          "description": "The role of an established connection. In the normal role, the connection is assumed to be used for AMQP clients that are doing normal message delivery over the connection.  In the inter-router role, the connection is assumed to be to another router in the network.  Inter-router discovery and routing protocols can only be used over inter-router connections. route-container role can be used for router-container connections, for example, a router-broker connection."
        }, 
        "protocolFamily": {
          "type": [
            "IPv4", 
            "IPv6"
          ], 
          "description": "['IPv4', 'IPv6'] IPv4: Internet Protocol version 4; IPv6: Internet Protocol version 6.  If not specified, the protocol family will be automatically determined from the address."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "httpRoot": {
          "type": "path", 
          "description": "Serve HTTP files from this directory, defaults to the installed stand-alone console directory"
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "maxFrameSize": {
          "default": 16384, 
          "type": "integer", 
          "description": "The maximum frame size in octets that will be used in the connection-open negotiation with a connected peer.  The frame size is the largest contiguous set of uninterrupted data that can be sent for a message delivery over the connection. Interleaving of messages on different links is done at frame granularity. Policy settings, if specified, will overwrite this value. Defaults to 16384."
        }, 
        "sslProfile": {
          "type": "string", 
          "description": "Name of the sslProfile."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.listener", 
      "description": "Listens for incoming connections to the router."
    }, 
    "configurationEntity": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.configurationEntity", 
      "description": "Base type for entities containing configuration information."
    }, 
    "address": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "egressPhase": {
          "type": "integer", 
          "description": "Advanced - Override the egress phase for this address"
        }, 
        "pattern": {
          "type": "string", 
          "description": "A wildcarded pattern for address matching. Incoming addresses are matched against this pattern. Matching addresses use the configured settings. The pattern consists of one or more tokens separated by a forward slash '/'. A token can be one of the following: a * character, a # character, or a sequence of characters that do not include /, *, or #.  The * token matches any single token.  The # token matches zero or more tokens. * has higher precedence than #, and exact match has the highest precedence. Cannot be used with a prefix attribute."
        }, 
        "prefix": {
          "type": "string", 
          "description": "The address prefix for the configured settings. Cannot be used with a pattern attribute."
        }, 
        "ingressPhase": {
          "type": "integer", 
          "description": "Advanced - Override the ingress phase for this address"
        }, 
        "waypoint": {
          "type": "boolean", 
          "description": "Designates this address space as being used for waypoints.  This will cause the proper address-phasing to be used."
        }, 
        "distribution": {
          "default": "balanced", 
          "type": [
            "multicast", 
            "closest", 
            "balanced", 
            "unavailable"
          ], 
          "description": "Treatment of traffic associated with the address"
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.config.address", 
      "description": "Entity type for address configuration.  This is used to configure the treatment of message-routed deliveries within a particular address-space.  The configuration controls distribution and address phasing."
    }, 
    "authServicePlugin": {
      "operations": [
        "CREATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "saslInitHostname": {
          "type": "string", 
          "description": "Value to set for hostname field on sasl-init"
        }, 
        "authSslProfile": {
          "type": "string", 
          "description": "Name of the sslProfile to use for the authentication service."
        }, 
        "authService": {
          "required": true, 
          "type": "string", 
          "description": "Address of a service to delegate authentication to."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.authServicePlugin", 
      "description": "EXPERIMENTAL. Attributes for setting SASL plugin."
    }, 
    "router.node": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "routerLink": {
          "type": "entityId", 
          "description": "Local link to remote node"
        }, 
        "nextHop": {
          "type": "string", 
          "description": "Neighbour ID of next hop to remote node from here."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "validOrigins": {
          "type": "list", 
          "description": "List of valid origin nodes for messages arriving via the re mote node, used for duplicate elimination in redundant networks."
        }, 
        "linkState": {
          "type": "list", 
          "description": "List of remote node's neighbours."
        }, 
        "instance": {
          "type": "integer", 
          "description": "Remote node boot number."
        }, 
        "cost": {
          "type": "integer", 
          "description": "Reachability cost"
        }, 
        "protocolVersion": {
          "type": "integer", 
          "description": "Router-protocol version supported by the node."
        }, 
        "address": {
          "type": "string", 
          "description": "Address of the remote node"
        }, 
        "lastTopoChange": {
          "type": "integer", 
          "description": "Timestamp showing the most recent change to this node's neighborhood."
        }, 
        "id": {
          "type": "string", 
          "description": "Remote node identifier."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.node", 
      "description": "Remote router node connected to this router."
    }, 
    "dummy": {
      "operations": [
        "CREATE", 
        "READ", 
        "UPDATE", 
        "DELETE", 
        "CALLME"
      ], 
      "attributes": {
        "num1": {
          "type": "integer"
        }, 
        "num2": {
          "type": "integer"
        }, 
        "arg1": {
          "type": "string"
        }, 
        "arg2": {
          "type": "string"
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.dummy", 
      "description": "Dummy entity for test purposes."
    }, 
    "router.address": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "subscriberCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of local subscribers for this address (i.e. attached to this router)"
        }, 
        "deliveriesEgress": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of deliveries to this address that exited the router network on this router"
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "deliveriesIngress": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of deliveries to this address that entered the router network on this router"
        }, 
        "transitOutstanding": {
          "type": "list", 
          "description": "List of numbers of outstanding deliveries across a transit (inter-router) link for this address.  This is for balanced distribution only."
        }, 
        "remoteCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of remote routers that have at least one subscriber to this address"
        }, 
        "inProcess": {
          "type": "integer", 
          "description": "The number of in-process subscribers for this address"
        }, 
        "deliveriesFromContainer": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of deliveries to this address that were originated from an in-process entity"
        }, 
        "deliveriesTransit": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of deliveries to this address that transited this router to another router"
        }, 
        "containerCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of attached containers that serve this route address"
        }, 
        "key": {
          "type": "string", 
          "description": "Internal unique (to this router) key to identify the address"
        }, 
        "distribution": {
          "type": [
            "flood", 
            "multicast", 
            "closest", 
            "balanced", 
            "linkBalanced", 
            "unavailable"
          ], 
          "description": "Forwarding treatment for the address: flood - messages delivered to all subscribers along all available paths (this will cause duplicate deliveries if there are redundant paths); multicast - one copy of each message delivered to all subscribers; closest - messages delivered to only the closest subscriber; balanced - messages delivered to one subscriber with load balanced across subscribers; linkBalanced - for link-routing, link attaches balanced across destinations; unavailable - this address is unavailable, link attaches to an address of unavailable distribution will be rejected."
        }, 
        "trackedDeliveries": {
          "type": "integer", 
          "description": "Number of transit deliveries being tracked for this address (for balanced distribution)."
        }, 
        "deliveriesToContainer": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of deliveries to this address that were given to an in-process subscriber"
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "remoteHostRouters": {
          "type": "list", 
          "description": "List of remote routers on which there is a destination for this address."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.address", 
      "description": "AMQP address managed by the router."
    }, 
    "router.link": {
      "operations": [
        "UPDATE", 
        "READ"
      ], 
      "attributes": {
        "adminStatus": {
          "default": "enabled", 
          "type": [
            "enabled", 
            "disabled"
          ]
        }, 
        "linkType": {
          "type": [
            "endpoint", 
            "router-control", 
            "inter-router"
          ], 
          "description": "Type of link: endpoint: a link to a normally connected endpoint; inter-router: a link to another router in the network."
        }, 
        "releasedCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of released deliveries."
        }, 
        "capacity": {
          "type": "integer", 
          "description": "The capacity, in deliveries, for the link.  The number of undelivered plus unsettled deliveries shall not exceed the capacity.  This is enforced by link flow control."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "operStatus": {
          "type": [
            "up", 
            "down", 
            "quiescing", 
            "idle"
          ]
        }, 
        "linkDir": {
          "type": [
            "in", 
            "out"
          ], 
          "description": "Direction of delivery flow over the link, inbound or outbound to or from the router."
        }, 
        "unsettledCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of unsettled deliveries awaiting settlement on the link"
        }, 
        "deliveryCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of deliveries that have traversed this link."
        }, 
        "modifiedCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of modified deliveries."
        }, 
        "peer": {
          "type": "string", 
          "description": "Identifier of the paired link if this is an attach-routed link."
        }, 
        "owningAddr": {
          "type": "string", 
          "description": "Address assigned to this link during attach: The target for inbound links or the source for outbound links."
        }, 
        "rejectedCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of rejected deliveries."
        }, 
        "undeliveredCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The number of undelivered messages pending for the link."
        }, 
        "linkName": {
          "type": "string", 
          "description": "Name assigned to the link in the Attach."
        }, 
        "presettledCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of pre-settled deliveries."
        }, 
        "acceptedCount": {
          "graph": true, 
          "type": "integer", 
          "description": "The total number of accepted deliveries."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        },
        "connectionId": {
          "type": "integer",
          "description": "The connection id."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router.link", 
      "description": "Link to another AMQP endpoint: router node, client or other AMQP process."
    }, 
    "org.amqp.management": {
      "operations": [
        "QUERY", 
        "GET-TYPES", 
        "GET-ANNOTATIONS", 
        "GET-OPERATIONS", 
        "GET-ATTRIBUTES", 
        "GET-MGMT-NODES", 
        "READ"
      ], 
      "attributes": {
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.org.amqp.management", 
      "description": "The standard AMQP management node interface."
    }, 
    "operationalEntity": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.operationalEntity", 
      "description": "Base type for entities containing current operational information."
    }, 
    "connection": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "container": {
          "type": "string", 
          "description": "The container for this connection"
        }, 
        "opened": {
          "type": "boolean", 
          "description": "The connection has been opened (i.e. AMQP OPEN)"
        }, 
        "sslCipher": {
          "type": "string", 
          "description": "SSL cipher name"
        }, 
        "user": {
          "type": "string", 
          "description": "Identity of the authenticated user."
        }, 
        "sslProto": {
          "type": "string", 
          "description": "SSL protocol name"
        }, 
        "dir": {
          "type": [
            "in", 
            "out"
          ], 
          "description": "Direction of connection establishment in or out of the router."
        }, 
        "ssl": {
          "type": "boolean", 
          "description": "True iff SSL/TLS is in effect for this connection."
        }, 
        "host": {
          "type": "string", 
          "description": "IP address and port number in the form addr:port."
        }, 
        "isEncrypted": {
          "type": "boolean", 
          "description": "Indicates whether the connection content is encrypted."
        }, 
        "role": {
          "type": "string"
        }, 
        "isAuthenticated": {
          "type": "boolean", 
          "description": "Indicates whether the identity of the connection's user is authentic."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "sasl": {
          "type": "string", 
          "description": "SASL mechanism in effect for authentication."
        }, 
        "sslSsf": {
          "type": "integer", 
          "description": "SSL strength factor in effect"
        }, 
        "properties": {
          "type": "map", 
          "description": "Connection properties supplied by the peer."
        }, 
        "tenant": {
          "type": "string", 
          "description": "If multi-tenancy is on for this connection, the tenant space in effect"
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.connection", 
      "description": "Connections to the router's container."
    }, 
    "router": {
      "operations": [
        "READ"
      ], 
      "attributes": {
        "workerThreads": {
          "default": 4, 
          "type": "integer", 
          "description": "The number of threads that will be created to process message traffic and other application work (timers, non-amqp file descriptors, etc.) ."
        }, 
        "saslConfigName": {
          "default": "qdrouterd", 
          "type": "string", 
          "description": "Name of the SASL configuration.  This string + '.conf' is the name of the configuration file."
        }, 
        "id": {
          "type": "string", 
          "description": "Router's unique identity. One of id or routerId is required. The router will fail to start without id or routerId"
        }, 
        "raIntervalFlux": {
          "default": 4, 
          "type": "integer", 
          "description": "Interval in seconds between Router-Advertisements sent to all routers during topology fluctuations."
        }, 
        "helloInterval": {
          "default": 1, 
          "type": "integer", 
          "description": "Interval in seconds between HELLO messages sent to neighbor routers."
        }, 
        "helloMaxAge": {
          "default": 3, 
          "type": "integer", 
          "description": "Time in seconds after which a neighbor is declared lost if no HELLO is received."
        }, 
        "saslConfigPath": {
          "type": "path", 
          "description": "Absolute path to the SASL configuration file."
        }, 
        "remoteLsMaxAge": {
          "default": 60, 
          "type": "integer", 
          "description": "Time in seconds after which link state is declared stale if no RA is received."
        }, 
        "raInterval": {
          "default": 30, 
          "type": "integer", 
          "description": "Interval in seconds between Router-Advertisements sent to all routers in a stable network."
        }, 
        "debugDump": {
          "type": "path", 
          "description": "A file to dump debugging information that can't be logged normally."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }, 
        "defaultDistribution": {
          "default": "balanced", 
          "type": [
            "multicast", 
            "closest", 
            "balanced", 
            "unavailable"
          ], 
          "description": "Default forwarding treatment for any address without a specified treatment. multicast - one copy of each message delivered to all subscribers; closest - messages delivered to only the closest subscriber; balanced - messages delivered to one subscriber with load balanced across subscribers; unavailable - this address is unavailable, link attaches to an address of unavilable distribution will be rejected."
        }, 
        "mode": {
          "default": "standalone", 
          "type": [
            "standalone", 
            "interior"
          ], 
          "description": "In standalone mode, the router operates as a single component.  It does not participate in the routing protocol and therefore will not cooperate with other routers. In interior mode, the router operates in cooperation with other interior routers in an interconnected network."
        }, 
        "allowUnsettledMulticast": {
          "type": "boolean", 
          "description": "If true, allow senders to send unsettled deliveries to multicast addresses.  These deliveries shall be settled by the ingress router.  If false, unsettled deliveries to multicast addresses shall be rejected."
        }
      },
      "singleton": true, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.router", 
      "description": "Tracks peer routers and computes routes to destinations. This entity is mandatory. The router will not start without this entity."
    }, 
    "vhost": {
      "operations": [
        "CREATE", 
        "UPDATE", 
        "DELETE", 
        "READ"
      ], 
      "attributes": {
        "allowUnknownUser": {
          "type": "boolean", 
          "description": "Unrestricted users, those who are not members of a defined user group, are allowed to connect to this application. Unrestricted users are assigned to the 'default' user group and receive 'default' settings."
        }, 
        "maxConnectionsPerUser": {
          "default": 65535, 
          "type": "integer", 
          "description": "Maximum number of concurrent client connections allowed for any single user."
        }, 
        "groups": {
          "type": "map", 
          "description": "A map where each key is a user group name and the value is a map of the corresponding settings for that group."
        }, 
        "maxConnections": {
          "default": 65535, 
          "type": "integer", 
          "description": "Maximum number of concurrent client connections allowed."
        }, 
        "maxConnectionsPerHost": {
          "default": 65535, 
          "type": "integer", 
          "description": "Maximum number of concurrent client connections allowed for any remote host."
        }, 
        "id": {
          "required": true, 
          "type": "string", 
          "description": "The vhost name."
        }, 
        "identity": {
          "unique": true, 
          "type": "string", 
          "description": "Unique identity generated by the system. Will not change."
        }, 
        "name": {
          "unique": true, 
          "type": "string", 
          "description": "Unique name optionally assigned by user. Can be changed."
        }
      }, 
      "fullyQualifiedType": "org.apache.qpid.dispatch.vhost", 
      "description": "AMQP virtual host policy definition of users, user groups, allowed remote hosts, and AMQP restrictions."
    }
  }
}
